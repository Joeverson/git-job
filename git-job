#!/bin/bash

# imports
. OpenProjectConnect.sh

task_id=$1

# constant onde fica as informações de logs e de timer
FILE_NAME_SETTINGS='~/git-job.txt.log'

# pequeno help de comandos
help() {
  echo -e "\n @@ Script para facilitar a criação e atuallização de novas Branchs @@\n"
  echo -e "\n Exemplo:"
  echo -e "\n- Criando uma nova branch atualizada com as ultimas coisas da branche de desenvolvimento"
  echo -e "\n\t$ git-job [branch] [task_id] [title-of-the-task]"
  echo -e "\n- Abrindo o Help"
  echo -e "\n\t$ git-job --help"
  echo -e "\n- Finalizando o timer da task"
  echo -e "\n\t$ git-job --stop"
}

# timer counter for init the job
timer() {
  case $1 in
    stop) saveSettings "start-time:$(date '+%Y-%m-%d %H:%M:%S')" ;;
    start)
      cleanfile
      saveSettings "start-time:$(date '+%Y-%m-%d %H:%M:%S')" ;;
  esac
}

# escrevendo no arquivo de configuraçaõ
saveSettings() {
  `echo $1 >> ~/git-job.txt.log`
}
# limpando o arquivo de datas
cleanfile() {
  if [ -w $FILE_NAME_SETTINGS ];
  then
    rm $FILE_NAME_SETTINGS
  fi
}

# fazendo o fluxo do git para alterar a branch baixar as coisas e atualizar
doGitFlow() {
  git checkout $BRANCH_UPLEVEL && git pull origin $BRANCH_UPLEVEL &&  git checkout -b "$task_id_$TASK_NAME"
}

main() {
  if [ -z $1 ];
  then
    echo 'Você precisa passar algum parâmetro, saiba mais com o comando: "git-job --help"'
  else
    case $1 in
      --help) help ;;
      --stop) timer 'stop' ;;
      *) 
        getNameTaskOpenProject $task_id
        doGitFlow ;;
    esac
  fi
}

# INICIALIZAÇÂO

loadFileConfig
main $1
